WOODEN DRONE:

  ✔ From here I'd like to start editing the sensor routines to include Arduino hooks. The sensor.h file should work at the moment on both desktop and Rpi so it's time to get it to work on Arduino hooks. Edit the Sensor routine to use the newly formed folders. Think a bit more on how you want to have this sensor block. I'm assuming you'll just be importing all the sensors? Pitot, IMU, GPS, etc??? What if those sensors are not connected? Is there a way for the controller to ignore erroneous data? Or maybe just turn them on and off in the controller? @done (22-05-18 06:55)

  ✔ For whatever reason I couldn't get the Arduino IDE to accept the folder structure of the vehicles/ folder. So right now the forces.* is in here since Arduino doesn't need it and there is a quadcopter_controller/ folder that is imported by the Arduino IDE. It's possible you'll need to put all the control systems in the libraries folder and then the config and force models in the vehicles folder. Perhaps you can just put the entire vehicles/ folder in the libraries folder for consistency. @done (23-04-03 10:11)

  ✔ Make all of the sensor specific items happen inside the sensor class. @done (23-03-02 20:46)

  ✔ In order for this to work, the datlogger routine is going to need to get updated to work for an SD breakout board. @done (23-03-02 20:46)

  ✔ INO routine logs IMU data @done (23-03-26 21:15)

  ✔ INO routine logs MPL (Baro) data @done (23-03-09 12:05)

  ✔ INO routine logs GPS data @done (23-03-02 20:46)

  ✔ I then would like you to make an INO routine that logs all sensor data IMU, MPL, GPS (I think those are all the sensors). @done (23-03-26 21:15)

  ✔ Make sure you can actually log data. The SD card failed unfortunately. @done (23-04-25 10:35)

  ✔ IMU and Barometer also failed lol. Need to fix that as well @done (23-04-25 11:13)

  ✔ Using this log routine I want you to log like an hour of data to disk and then save it for later processing of noise and bias. This routine needs to be general enough to work on Navio as well @done (23-04-25 13:36)

  ✔ Datalogger routine will need to be augmented to hangle RPi, DESKTOP and ARDUINO @done (23-03-02 20:46)

  ☐ Start analyzing the data you obtained in from the hour of logging. See if you can get bias, std dev, noise, etc and then add that to the Sensors routine when you're using DESKTOP and POLLUTED sensor mode.

 ✔ Once the Arduino hooks are in I would like one more Arduino Routine that reads the RCInput and then feeds them (pass through) to RCOutput. This will require you to use the RCInput and RCOutput routines which hopefully got combined between Navio and Arduino at which point you'll also need hooks in there for the JOYSTICK as well. Again these need to be general enough that just changing the Makefile will compile the routine onto different architectures @done (23-03-02 20:47)

 ✔ Using this routine log back in to betaflight and make sure you have everything set up properly for the on board Flight controller. Again remember that the autopilot (non-PID) is the only thing that's going to go on Gitlab so for now you can make a pass through just like above and make sure the receiver is sending appropriate signals to the servos @done (23-03-09 12:06)

 ☐ You should also be able to fly the drone at this point. So it would be good to go ahead and fly the drone

 ☐ Plot data from this flight test

 ☐ Add telemetry when in AUTO mode on Arduino. Use Serial class and add Arduino Hooks. Note that Telemetry will default to sending different signals when in HIL mode
 
 ☐ Using a scale and the pass through Arduino routine get the thrust of the motor as a function of microsend pulse and add that to the aerodynamics routine for the quadcopter. While you're doing this experiment figure out how long it takes to go from full throttle on your control stick to full throttle on the drone. That is the amount of delay we need to introduce into our actuators.

 ☐ Wooden Drone waypoint flights - Can focus on outerloop control laws (Make sure to update blog for this one)
    ☐ Attempt to code altitude hold for drone using deltaP and Az
    ☐ Station keeping
    ☐ Point to a desired heading
    ☐ Waypoint controller

Finishing HIL:

  ☐ Try running the integrator on the pi and send data to computer for rendering and create a new mode called RENDER

  ☐ Dan said it's possible the RK4 vector and control vector are asynchronous and causing issues. Might need to investigate the RK4 state and the control state and see if I'm dealing with that properly. To do that print time,state,control on both desktop and pi and see if you're off. Maxwell had a good idea to lower the timestep to see if that fixes it.

  ☐ Run SIL on Pi with Desktop mode - As in run FASTKit on Raspbian and do away with Emlid

  ✔ Call Panini at AREAI @done (22-12-02 10:07)

  ✔ We can also upgrade from the Pi3 to the Pi4 with lots of RAM @done (22-12-02 09:49)

  ✔ Create a scheduler for all sensors. @done (22-05-17 20:21)

COMPLEX AUTOPILOT LOOP:
    
  ✔ Test autopilot control laws in SIMONLY mode @done (22-08-09 17:24)
    ✔ Program heading angle estimation and simulate @done (22-08-09 15:47)
    ✔ Program velocity controller and simulate @done (22-08-09 15:47)
    ✔ Program waypoint controller and have airplane fly a square pattern @done (22-08-09 17:24)

  ✔ Test autopilot control laws in SIMONLY mode with Sensor errors @done (22-08-14 17:01)

  ✔ Test autopilot control laws in SIL mode @done (22-08-14 17:28)

  ☐ Test autopilot control laws in SIL mode with Sensor errors

  ✔ Test autopilot controls laws in HIL mode @done (22-11-11 14:39)

  ☐ Test autopilot controls laws in HIL mode with Sensor Errors

  ☐ Need to actually measure the values of bias, noise and std otherwise all the simulations above are kind of pointless

  ✔ Test autopilot on real systems - RCIO needs to be able to handle where to send ESC signals depending on #define in Makefile @done (22-11-10 20:59)
    ✔ Heading Angle Estimation and make sure we are adequately estimating heading in real life @done (22-11-10 21:00)
    ✔ (phi from accel only, theta from accel only, heading from mag only, Euler from gyro only, filtered roll and pitch from gyro and accel, heading from gps, filtered heading from mag, gyro, gps, Euler from AHRS, heading from AHRS and GPS) @done (22-11-10 20:59)
    ✔ Test velocity controller in real life @done (22-11-10 21:00)
    ☐ Test waypoint controller in real life

META:

  ✔ Barometer calibration has screwed up the z altitude before calibration. Need a fix here @done (22-12-02 09:50)

  ☐ SysID of airplane (Flights + simulation)

  ✔ Simulation of waypoint flights of single airplane @done (22-11-10 21:00)

  ☐ Waypoint flights of single airplane

  ✔ Simulation of Meta waypoint controller @done (22-11-10 21:00)

  ☐ Meta flying waypoints to compare efficiency - Maxwell Cobar

  ☐ Disconnecting and reconnecting - this would be insane.

  ☐ Two Way communication to update waypoints on the fly - Note that sending data from the Rpi to Desktop is working but Desktop to Rpi is broken if you use an Rpi3. This broke sometime between FASTPilot and FASTKit so circa 2019 to 2022. 

BDE DJI Flights:

  ☐ Training wheels - PVC Booms with tennis balls strapped to bottom of frame to prevent roll over. Test roll over by physically trying to roll over drone.

  ☐ Double check motor numbers and write motor numbers on the motors themselves just like the arrows. Ensure that motor, prop and motor number matches bumblebee (look in addMotor routine to see the direction)

  ☐ Use SIMPilot on BDE with Rpi+Navio and test ESC Motor direction

  ☐ Calibrate each ESC

  ☐ Test one motor at a time by hardcoding one motor. Go 0 to full throttle on each motor and ensure that structure tilts to imply that thrust is being produced. Ensure that 0 is 992 microseconds and full throttle is 2016.

  ☐ Ensure that 992 microsecond signal to all motors produces 0 thrust

  ☐ Ensure that 2016 microsecond signal to all motors produces 8004g thrust per motor

  ☐ Get thrust of each motor

  ☐ Once motor/prop/number are all correct I want all ESCs soldered. I also want screw on wire harnesses as well

  ☐ Better battery mounting harnesses. My idea is just balsa glue to the frame with square rod supports on the back to prevent rotation of battery.

  ☐ Use the DJI flight controller on FASTIris

  ☐ Use the DJI flight controller on BDE

BDE FASTSim:
    
  ☐ Download data from BDE and plot data to investigate some common issues. Did the front motors spin up when the drone tilted forward? Did the IMU accurately measure the forward tilt?

  ☐ Run a test on motor delay (how long does it take to go from 0 to full throttle?)

  ☐ Set inertias Ixx and Iyy to 6.5 slug-ft^2 based on m/6*a^2 calculation

  ☐ Set inertia to 6.5 slug-ft^2 and mass = 50/32.2 slugs.

  ☐ Place inertia and motor specs placed into simulation

  ☐ Write aerodynamics and controller.cpp innerloop files for X8

  ☐ Add noise to IMU sensor that is similar to noise experienced by RPi

  ☐ Add motor delay to simulation

  ☐ Reset gains to (ki=0,kd=1.0,kp=max torque) and set theta and roll initial to 3 degrees. 

  ☐ Simulate climbing 1 foot and see if roll and pitch and yaw are stable

  ☐ Tune gains to have no overshoot and 1 second time response if possible

  ☐ Tune gains with only 4 motors to see if it’s drastically different. If so, retune.

  ☐ Perform a robustness trade study and see how much variation in inertia the control system can handle. 

  ☐ Perform another robustness trade study on motor effectiveness by adding in 10% variation in motor thrust

  ☐ Program Station keeping controller and see if drone can maintain a certain space

  ☐ Program waypoint controller and see if drone can point to a waypoint by just commanding heading

  ☐ Create sig1-8 which are all unknown such that T1 = sig1*T1desired

  ☐ Create an online parameter estimation block using a self tuning controller to estimate sig1-8.

  ☐ If current BDE controller cannot handle very much variation I suggest adding an adaptive controller to the simulation like an MRAC or ST controller. Maxwell coded this in python and is in the Python.git/nonlinear_controls folder

  ☐ If sig < 50% turn it off and reconfigure

  ☐ Potentially use ML from Dr. Fahimi and Brian from UAH

  ☐ Run BDE FASTSim in SIL mode

  ☐ Run BDE FASTSim in HIL mode

BDE FASTPilot:

  ☐ Mount telemetry hardware to drone behind flight controller for debugging in the field

  ☐ Ensure that telemetry is working so that you can debug in the field

  ☐ Reset gains (ki = 0,kd = 1.0,kp = figure out maximum torque capable by motors for +- 50 degrees. When pilot commands full stick right I want full roll torque)

  ☐ After run one hub at a time and ensure that rolling and pitching control stick causes that hub to move as intended.

  ☐ Create a more rigorous preflight check by allowing the PIC to spin one motor at a time and an IMU and RX check

  ☐ Once all previous changes are completed, fly behind Shelby Hall with 4 motors and props to reduce risk of prop damage

  ☐ Adopt a policy of “no go” if ANY off nominal conditions present. If odd pitch oscillations are seen the call needs to be made to stop. Come up with other failure modes. Someone needs to call the shots and abort the mission. What sorts of things do we abort on?

  ☐ Perform ground rolls with roll and pitch control to ensure control is adequate. Could have someone sit underneath drone inside roll cage and "tilt the can"

  ☐ Attempt to fly with 4 motors a foot or two off the ground

  ☐ Attempt to fly with 8 motors a foot or two off the ground 

  ☐ If first flight is still is not 90% of the way there you may need to mount BDE to a rotational platform and tune one axis at a time or email Travis Fields or anyone else with large drone flight test experience.

  ☐ If first flight test is 90% of the way there determined by the PIC the next flight test must be performed at irvington

  ☐ Fly at irvington and perform any last minute tweaks to software

  ☐ Write a paper

  ☐ Add Fault tolerant control?

SATELLITE:

  ✔ Check that cubesat spinning with q=0,r=0 only spins about p when I is diagonal @done (22-10-28 09:43)

  ✔ Verify that we can put a cubesat in orbit @done (22-10-28 10:04)

  ☐ Verify that barometer altitude is working since pressure currently assumes a Z coordinate for altitude

  ✔ Double check that the magnetic field model is working @done (23-02-15 08:05)

  ☐ Double check that the simulation runs with OpenGL around a Planet

  ☐ Make sure the magnetorquer code is working
  
  ☐ Make sure the reaction wheel code is working for Satellite
  
  ☐ Run the MultiSAT++ SIL code and make sure you have the control system set up properly for CubeSats.
  
  ☐ Run the MultiSAT++ HIL sim with an Arduino and make sure that FASTKit has the same functionality so you don't have to use MultiSAT++ anymore for CubeSat stuff

EXTRA STUFF:
  
  ✔ Change the name to FASTCASST - Configurable Autopilot and Simulation Software Tool @done (23-01-30 16:13)

  ✔ Fix the double to integer numerical precision issue by adding a quantization flag to the Simulation.txt file. I added a terrible hack where the control_matrix and the pwm_array is sent to every routine and a #ifdef cubesat is there to switch between the two. That's terrible. What we need to do is send the double array to all routines and then somewhere in the model we quantize the array if the flag is set @done (23-02-15 10:32)

  ☐ Hey the FASTDuino code is horribly hacked together. Would be nice to actually streamline the code. That is use the sensors and hardware class and rcio class so that the ino is a bit more high level. 

  ☐ Create a routine where you compile and run candidate codes to make sure everything operates as intended - Like compile simonly, sil and hil on desktop and make sure that simonly and sil runs properly

  ☐ Thread the IMU and GPS

  ☐ Investigate the Barometer delay and see if we can make it better

  ☐ See why Ground station lags by two seconds. Possible source is updating the window (Turn some off and see what happens, actually the better option is to just thread the serial and update the GUI on a different thread using a queue)

  ☐ We can try systemd which is apparently what Arducopter uses

  ☐ Another option is we write our own embedded software for the Pi

  ☐ Have GPS origin point for simulation set inside Simulation.txt

  ☐ Furtheremore, there are a ton of variables hardcoded for Telemetry. Either those variable need to be added into Config.txt or a new file must be added like Serial.txt or something. My vote is for Config.txt but we have to be careful because the mass matrix is in there. At the same time does it really matter?

  ☐ I'd like there to be a SIMONLY version of Arduino where the Arduino just fakes the sensors. This way I can debug runtime errors without actually having the hardware.

RENDERING:

  ✔ Create CAD for all vehicles you are using @done (21-11-06 11:30)
    ✔ Car (Tank) #@done (21-10-29 23:37)
    ✔ Plane #@done (21-10-31 22:13)
    ✔ Quad #@done (21-09-30 20:40)
    ✔ X8 @done (21-11-06 11:30)

  ☐ How do you feel about updating OpenGL rendering environment to Unreal engine or something like Godot or even Unity???

COMPLETED===================================================================================================================:

FASTPILOT:

 ✔ Fork code to www.gitlab.com:Montalvo/FASTPilot.git - To do this just put the MODELS in FASTPilot. So all you need to do is edit the MakeFile to reference that FASTPilot folder but main.cpp will still be in github @done (22-12-02 09:50)

 ✔ Only fork code to FASTPilot in the event you are developing code that does not already exist in print @done (22-12-02 09:50)

HIL:

  ✔ For HIL - use the HIL code from MultiSAT++ for FASTsim @done (22-05-24 18:50)

  ✔ Once HIL mode works for SIM you can deprecate the HIL simulation in MultiSAT++ (See note below. Definitely not going to deprecate. I definitely want a copy. I think the point more is to try and get FASTKit to work like MultiSAT++ does for embedded Sims.) @done (22-05-24 18:54)
  
  ✔ MultiSAT++ simulation will still need copies of the C++ repo but as you make the Model=SAT mode more like MultiSAT++ you can deprecate this simulation. Still I would like to make sure I still have a running version of MultiSAT++ to work with in the event I do E-Sail simulations. @done (22-05-24 18:52)
  
  ✔ Add hooks to FASTSim that compile DESKTOP + HIL and RPI/Arduino HIL that sends sensor data and control commands back and forth. The RPI/HIL version will accept a polluted state vector from the computer and run that through the control algorithm and then pass back the control commands to the integrator. So serialListens and SerialResponds etc will need to be written to send data back and forth @done (22-05-24 18:50)

  ✔ Testing sending sense data 1 way from desktop to Rpi - just have RPI print the data to the screen to be sure data is transmitting 1 way @done (22-10-25 12:25)

  ✔ Have the Rpi print the control matrix every time it receives new data that way you can see the update in the control signals based on the inputs and do this with the receiver taking data so you can fly the plan manually @done (22-10-25 12:53)

  ✔ Verify that HIL and Serial tests are still functioning at Work @done (22-10-26 12:49)

  ✔ Can I send data wirelessly back and forth with the Rpi at work @done (22-10-26 12:49)

  ✔ If I bring the hardwire connection home can I get the home Rpi to send data back and forth @done (22-10-26 12:49)

  ✔ Then finally test wireless at home @done (22-10-26 13:05)

  ✔ Fix the problem where RPI reads the sensors from the Navio rather than the Serial port @done (22-10-27 10:17)

  ✔ Go back and make sure that when you send data to the RPi the values update @done (22-11-08 07:48)

  ✔ Have the Rpi send data 1 way to the desktop just like you did with the desktop but do this with the receiver taking data so you can fly the airplane manually @done (22-11-08 11:56)

  ✔ Create a loop where Desktop sends data to RPi and then waits for a valid update from Rpi @done (22-11-09 10:50)

  ✔ Create a loop on desktop where it waits for signal from desktop and then pushes data back to Desktop @done (22-11-09 10:50)

  ✔ Decrease HILRATE until the code can't run any faster @done (22-11-10 20:56)

  ✔ Run Tank in SIMONLY @done (22-11-11 10:09)
  ✔ Run Tank in SIL @done (22-11-11 10:09)
  ✔ Run Tank in HIL w/o telemetry but return rates back to normal @done (22-11-11 10:09)
  ✔ Run Tank in HIL w/ telemetry @done (22-11-11 10:09)
  ✔ Merge HIL branch @done (22-11-11 10:42)

  ✔ Increase baudrate for HIL to 115200 @done (22-12-03 07:55)

GROUND STATION:

  ✔ Create a ground station in Python for AUTO Mode (right now this is in Processing) (This will work for HIL mode as well since the Pi will be sending telemetry data) @done (22-06-13 15:38)

  ✔ Create a ground station in Python that works in SIL mode (no need for SIMONLY mode) @done (22-06-04 17:59)

  ✔ For telemetry think about writing a groundstation in python using a GUI. That might a lot easier to plot given the fact that you can use matplotlib (take a look at LISA simulation for help on GUIs and plots) Would be cool to have GUI run in SIL mode. According to the docs online you can have C++ create a text file and then Python read the file. How do we prevent both programs reading the same file? Have C++ increment [NUM].txt and then have Python read the latest. That should work @done (22-06-04 17:59)

AVIATION:

 ✔ Update Quadcopter and Airplane dynamics @done (22-04-12 20:38)
 ✔ Run SIMONLY simulations with quadcopter and airplane models @done (22-04-22 16:21)
 ✔ Run SIL simulations with quadcopter @done (22-04-24 20:43)
 ✔ Run SIL airplane models @done (22-04-24 20:43)
 ✔ Plot all data and email to team @done (22-04-24 20:43)

ANTX(DID NOT COMPLETE THESE TASKS):

 ✔ Make sure that the Batwing is working properly in Demo mode using SIMPILOT @done (22-04-24 20:43)
 
 ✔ Make sure telemetry is working properly using Processing @done (22-04-24 20:43)
 
 ✔ Upgrade Processing Software with whatever signals are being sent from Drone - Current iteration of software is in Processing.git/Serial/ReceiveHexDump.pde Original software used during NOAA campaign is in GROUND_STATION also in Serial folder. Be sure to check Archive folder. I'd like the ground station software to be versatile enough that it can handle any number of sensors from telemetry you just simply need to specify what sensors are being read in and in what order @done (22-04-24 20:43)
 
 ✔ Market our entire setup as an independent contractor if needed @done (22-04-24 20:44)

 ✔ Publish another paper? @done (22-04-24 20:44)

FASTSim SysML:

   ✔ I think to make sure you have a simple transition you need to move all the C++ and HIL repos into MultiSAT as well. The reason being because HIL the simulation does not work right now in FASTSim. I think eventually you can deprecate the HIL simulation but just to make sure things still work properly you need to put a running copy into MultiSAT so it still works during the transition @done (21-12-28 22:19)
   ✔ Move HIL into C++ directory and delete HIL (call folder Hardware or something) @done (21-12-28 22:33)
   ✔ Rename all the aerodynamics.cpp routines to forces.cpp @done (21-12-30 08:01)
   ✔ Move all vehicles to a Model Folder @done (21-12-28 22:34)
   ✔ Re-org all folders in C++.git (Make C++ routines called Basic or something like that maybe Util? or COmmon? yea Common) @done (21-12-28 22:34)
   ✔ Code Orbit++ and add a sphere for Earth scaled by REARTH. Try to reuse as many routines as possible from MultiSat++. @done (21-12-30 16:47)
   ✔ deprecate Orbit++ from Aerospace folder @done (21-12-30 17:46)
   ✔ SysML diagrams for everything below to make sure everything works as intended @done (21-12-31 20:37)
   ✔ I think the HIL send should be in Dynamics (that’s the only place you need to send) @done (21-12-31 20:37)
   ✔ The HIL receive should be in Sensors (only place you need to receive) @done (21-12-31 20:37)
    ✔ Create a logical architecture that works for all vehicles in the structure that looks like the form: @done (21-12-31 20:37)
    ✔ Inner Loop @done (21-12-31 20:37)
      ✔ Inputs: Roll, pitch, yaw commands @done (21-12-31 20:37)
      ✔ Outputs: ctlcomms - us signals to RCIO class @done (21-12-31 20:37)
    ✔ Outerloop @done (21-12-31 20:37)
      ✔ Inputs: waypoint commands (x,y,altitude) @done (21-12-31 20:37)
      ✔ Outputs: roll pitch and yaw commands @done (21-12-31 20:37)
    ✔ GraveDigger - The Remote control car in the lab @done (21-12-31 20:37)
    ✔ BattleBot - the tank @done (21-12-31 20:37)
    ✔ FASTIris @done (21-12-31 20:37)
    ✔ Bumblebee @done (21-12-31 20:37)
    ✔ Meta 1 and 2 @done (21-12-31 20:38)
    ✔ Batwing @done (21-12-31 20:38)
   ✔ First Video is your struggle with something new @done (22-01-02 09:39)
   ✔ Second Video is on SysML diagrams @done (22-01-02 09:39)
   ✔ Rename C++.git to FAST.git @done (22-01-20 23:30)
   ✔ Make the software look like the SysML diagram. This will probably break everything @done (22-03-30 20:29)
   ✔ Put the Makefile in FAST that way you can do - make Demo or make Logger find a way to do this @done (21-12-29 17:27)
   ✔ I want the main.cpp for all the below routines to never have to be edited. @done (21-12-29 17:27)
      ✔ LOGGER - move from FASTSensors to here @done (21-12-29 17:27)
      ✔ DEMO - this is SimPilot @done (21-12-29 17:27)
      ✔ SIM  - This is FASTsim @done (21-12-29 17:27)
   ✔ Save FASTPilot.git on Gitlab for proprietary software @done (22-01-20 23:35)
   ✔ Merge all changes above @done (22-01-20 23:31)
   ✔ Delete HIL on Github. @done (22-01-20 23:35) I archived this instead

FASTSim:

  ✔ Have someone else walk through README and ensure they can compile code in SIMONLY mode and run process logs to plot done (21-08-24 14:46) #Running on Laptop but not Desktop - MJC

  ✔ The sensor errors are no longer working. why? that needs to be fixed done (21-09-03 20:58)

  ✔ SIL model does not work on a clean install of ubuntu 20.04. Need to figure out why? done (21-08-20 11:36) 

 ✔ Finish the actuator dynamics. There are alot of subtasks for this one #@done (21-09-12 22:24)
   ✔ Integrate the state vector to produce State. done (21-09-06 08:31)
   ✔ Send STate to the sensor routine and receive the polluted state done (21-09-06 08:33)
   ✔ Send pollutted state to controller built by the user to produce ctlcomms #@done (21-09-06 08:34)
   ✔ Send ctlcomms to actuator dynamics to produce actuators values #@done (21-09-07 21:42)
   ✔ Pollute actuator values with ACTUATOR ERRORS by some percentage #@done (21-09-07 21:42)
   ✔ Send actuator values to aerodynamics routine written by user to produce Forces and moments #@done (21-09-07 21:43)

 ✔ Complete the controller.cpp/.h file for the quadcopter folder. This can be open source since these equations are publicly available #@done (21-09-15 22:17)

 ✔ Complete the aerodynamics.cpp/.h file for the Quadcopter folder. This can be open source since these equations are publicly available #@done (21-09-21 11:00)

 ✔ Create the minimum viable rcout class for SIMONLY and SIL #@done (21-09-25 21:54) This was kind of easy because in SIMONLY and SIL mode the RCOutput does not do anything

 ✔ Run SIL on RPI - This mode should run in realtime but not with openGL #@done (21-10-15 11:25)

 ✔ Run SIMONLY only on RPI #@done (21-10-15 11:25)

 ✔ Finish writing sensor class for FASTsim #@done (21-10-15 11:26)

  ✔ The filter for the IMU needs to run all the time and needs to be an input to the simulation so you can change that on the fly. Ok actually I have a better idea. The filter doesn't need to be outside the filter parameter needs to change from s to....wait. The whole point of the filter is to use it when in SIL/SIMONLY mode so it's not that it needs to be outside the IMU routine it just needs to be it's own function set by a parameter that is not 's' but 'ComplimentaryFilterConstant' or something like that #@done (21-10-26 08:26)

  ✔ In that regard the GPS needs a heading angle estimator using the computeSpeed() routine but the function name needs to change and be overloaded so that old functions still work properly. I'm thinking GPSGroundTrack() would be appropriate and absorb all new functionality. #@done (21-11-06 12:42)

  ✔ I'd like a function in the Sensor routine to take the IMU heading and the GPS heading and filter them together. I did something like this on the Arduino I just don't quite remember where it is but I'm sure I'll find it. #@done (21-11-07 03:23)

 ✔ Run AUTO mode on RPI on Bumblebee @done (21-11-17 13:14)

 ✔ Add telemetry to send data to ground station @done (21-11-22 11:19)

 ✔ Complete aerodynamics for X8 @done (21-11-02 16:04)

 ✔ Complete the PID controller for the X8 @done (21-11-02 16:04)

 ✔ Complete aerodynamics for Aircraft #@done (21-10-31 22:14)

 ✔ Complete the controller (PID) for the A/C #@done (21-10-31 22:14)

 ✔ Edit the Makefile so you don't have to edit it everytime you compile differently. Would be cool to do make rebuild DESKTOP SIL RCTECH or make rebuild PI AUTO FLYSKY #@done (21-11-07 03:58)

 ✔ Add Keyboard inputs to RCIO so that you can control things with a keyboard #@done (21-11-07 04:56)

BattleBot:

  ✔ Create a CAD for the vehicle #@done (21-10-15 11:27)

  ✔ Ground Contact Model #@done (21-09-13 16:48)

  ✔ Create aerodynamics - I think the vehicle is so slow such that we don't need to worry about the forwards force but I do think we need a -k*v force in the Y direction also feed control signals to forces and moments. Also need -k*r in the yaw moment #@done (21-10-01 12:48)

  ✔ Create a controller to feed transmitter commands to 2 wheels with differential #@done (21-10-01 12:48)

  ✔ Run SIMONLY #@done (21-10-01 12:52)

  ✔ Run SIL #@done (21-10-01 13:10)

  ✔ Run AUTO mode on RPI for battle bot #@done (21-10-15 11:28)

SIMPILOT:

 ✔ Make sure the RCInput main.cpp test works in the Test_Scripts folder in HIL.git #@done (21-09-23 12:15)

 ✔ Add navio receiver rcin protocols to current RCInput.h/.cpp and test with receiver in the Lab What exactly is your plan for RCIO? Do you want RCInput and RCOutput to be in this folder like this? RCInput.h/RCInput.cpp and RCOutput.h/RCOutput.cpp That seems the most reasonable in my opinion. #@done (21-09-23 12:19)

 ✔ (Do this in FASTSim first before you do this) Add ESC outputs to existing RCOoutput but combine everything to the minimum viable set of routines. You'll probably have to create some test scripts. What exactly is your plan for RCIO? Do you want RCInput and RCOutput to be in this folder like this? RCInput.h/RCInput.cpp and RCOutput.h/RCOutput.cpp That seems the most reasonable in my opinion. #@done (21-09-27 12:29)

 ✔ Since you just edited the RCInput and RCOutput routine go back and make sure that SIMONLY, SIL and Rpi hooks are working in FASTSim. In order to get the RPi hooks working you're going to have to compile this routine in AUTO mode on the RPI. You'll also need to hook up the PWM outputs and some servos to make sure you're getting the output you think you're supposed to get. You might need to use an o-scope #@done (21-09-27 12:47)

 ✔ Quadcopter autopilot - write a simple PID loop. This can be open source since it won't work in flight. This will require creating a folder like Portalcube. For now leave the aerodynamics blank and just sent zeros since we're just interested in the controller. However make sure that the aerodynamics.cpp/.h are at least there. #@done (21-09-15 22:15)

 ✔ After you write the loop above pull out the controller and paste it into the simpilot.exe so its easier to see #@done (21-09-15 22:15)

 ✔ Move saturation block to RCIO to saturate pwmcomms during the write loop #@done (21-09-30 20:24)

 ✔ Add pwmcomms to logfile and update plotting routine to plot pwmcomms instead of ctlcomms #@done (21-09-30 20:34)

 ✔ Change FASTsim to use pwmcomms to run actuator dynamics #@done (21-09-30 20:34)

 ✔ ACRO and STAB mode on Hardware do not seem to function properly #@done (21-10-01 11:50)

 ✔ As a final check make sure both SimPilot SIMONLY,SIL and AUTO work #@done (21-10-01 11:54)

 ✔ Do the same for FASTsim SIMONLY, SIL #@done (21-10-01 12:39)

FASTSim Extra Sensors:

 ✔ Add barometer @done (21-12-17 16:21)
 ✔ Add ADC @done (21-12-17 16:21)
 ✔ Fix Datalogger to output a headers when you start (like one row @done (21-12-17 19:00)